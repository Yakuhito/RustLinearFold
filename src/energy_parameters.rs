// Energy parameters from ViennaRNA
// Taken directly from LinearFold: https://github.com/LinearFold/LinearFold/blob/master/src/Utils/energy_parameter.h#L14

use crate::{rna_base::RnaBase, rna_base_sequence_matches};

pub const VIE_INF: i32 = 10000000; // Same as in Vienna
pub const NBPAIRS: usize = 7; // NP CG GC GU UG AU UA NN

// Constants
pub const LXC37: f64 = 107.856;
pub const ML_INTERN37: i32 = -90;
pub const ML_CLOSING37: i32 = 930;
pub const ML_BASE37: i32 = 0;
pub const MAX_NINIO: i32 = 300;
pub const NINIO37: i32 = 60;
pub const TERMINAL_AU37: i32 = 50;

// Special loops
pub struct EnergyParameters {}

impl EnergyParameters {
    pub const TRILOOPS: [&str; 2] = ["CAACG", "GUUAC"];
    pub const TRILOOP37: [i32; 2] = [680, 690];
    pub fn get_triloop_energy(sequence: [RnaBase; 5]) -> Option<i32> {
        for (i, &pattern) in EnergyParameters::TRILOOPS.iter().enumerate() {
            if rna_base_sequence_matches!(&sequence, pattern) {
                return Some(EnergyParameters::TRILOOP37[i]);
            }
        }

        None
    }

    pub const TETRALOOPS: [&str; 16] = [
        "CAACGG", "CCAAGG", "CCACGG", "CCCAGG", "CCGAGG", "CCGCGG", "CCUAGG", "CCUCGG", "CUAAGG",
        "CUACGG", "CUCAGG", "CUCCGG", "CUGCGG", "CUUAGG", "CUUCGG", "CUUUGG",
    ];
    pub const TETRALOOP37: [i32; 16] = [
        550, 330, 370, 340, 350, 360, 370, 250, 360, 280, 370, 270, 280, 350, 370, 370,
    ];
    pub fn get_tetraloop_energy(sequence: [RnaBase; 6]) -> Option<i32> {
        for (i, &pattern) in EnergyParameters::TETRALOOPS.iter().enumerate() {
            if rna_base_sequence_matches!(&sequence, pattern) {
                return Some(EnergyParameters::TETRALOOP37[i]);
            }
        }

        None
    }

    pub const HEXALOOPS: [&str; 4] = ["ACAGUACU", "ACAGUGAU", "ACAGUGCU", "ACAGUGUU"];
    pub const HEXALOOP37: [i32; 4] = [280, 360, 290, 180];
    pub fn get_hexaloop_energy(sequence: [RnaBase; 8]) -> Option<i32> {
        for (i, &pattern) in EnergyParameters::HEXALOOPS.iter().enumerate() {
            if rna_base_sequence_matches!(&sequence, pattern) {
                return Some(EnergyParameters::HEXALOOP37[i]);
            }
        }

        None
    }
}

// Stack energies
pub const STACK37: [[i32; NBPAIRS + 1]; NBPAIRS + 1] = [
    [
        VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF,
    ],
    [VIE_INF, -240, -330, -210, -140, -210, -210, -140],
    [VIE_INF, -330, -340, -250, -150, -220, -240, -150],
    [VIE_INF, -210, -250, 130, -50, -140, -130, 130],
    [VIE_INF, -140, -150, -50, 30, -60, -100, 30],
    [VIE_INF, -210, -220, -140, -60, -110, -90, -60],
    [VIE_INF, -210, -240, -130, -100, -90, -130, -90],
    [VIE_INF, -140, -150, 130, 30, -60, -90, 130],
];

// Loop energies
pub const HAIRPIN37: [i32; 31] = [
    VIE_INF, VIE_INF, VIE_INF, 540, 560, 570, 540, 600, 550, 640, 650, 660, 670, 680, 690, 690,
    700, 710, 710, 720, 720, 730, 730, 740, 740, 750, 750, 750, 760, 760, 770,
];

pub const BULGE37: [i32; 31] = [
    VIE_INF, 380, 280, 320, 360, 400, 440, 460, 470, 480, 490, 500, 510, 520, 530, 540, 540, 550,
    550, 560, 570, 570, 580, 580, 580, 590, 590, 600, 600, 600, 610,
];

pub const INTERNAL_LOOP37: [i32; 31] = [
    VIE_INF, VIE_INF, 100, 100, 110, 200, 200, 210, 230, 240, 250, 260, 270, 280, 290, 290, 300,
    310, 310, 320, 330, 330, 340, 340, 350, 350, 350, 360, 360, 370, 370,
];

// Mismatch energies
pub const MISMATCH_I37: [[[i32; 5]; 5]; NBPAIRS + 1] = [
    // NP
    [[VIE_INF; 5]; 5],
    // CG
    [
        [0, 0, 0, 0, 0],
        [0, 0, 0, -80, 0],
        [0, 0, 0, 0, 0],
        [0, -100, 0, -100, 0],
        [0, 0, 0, 0, -60],
    ],
    // GC
    [
        [0, 0, 0, 0, 0],
        [0, 0, 0, -80, 0],
        [0, 0, 0, 0, 0],
        [0, -100, 0, -100, 0],
        [0, 0, 0, 0, -60],
    ],
    // GU
    [
        [70, 70, 70, 70, 70],
        [70, 70, 70, -10, 70],
        [70, 70, 70, 70, 70],
        [70, -30, 70, -30, 70],
        [70, 70, 70, 70, 10],
    ],
    // UG
    [
        [70, 70, 70, 70, 70],
        [70, 70, 70, -10, 70],
        [70, 70, 70, 70, 70],
        [70, -30, 70, -30, 70],
        [70, 70, 70, 70, 10],
    ],
    // AU
    [
        [70, 70, 70, 70, 70],
        [70, 70, 70, -10, 70],
        [70, 70, 70, 70, 70],
        [70, -30, 70, -30, 70],
        [70, 70, 70, 70, 10],
    ],
    // UA
    [
        [70, 70, 70, 70, 70],
        [70, 70, 70, -10, 70],
        [70, 70, 70, 70, 70],
        [70, -30, 70, -30, 70],
        [70, 70, 70, 70, 10],
    ],
    // NN
    [
        [70, 70, 70, 70, 70],
        [70, 70, 70, -10, 70],
        [70, 70, 70, 70, 70],
        [70, -30, 70, -30, 70],
        [70, 70, 70, 70, 10],
    ],
];

pub const MISMATCH_H37: [[[i32; 5]; 5]; NBPAIRS + 1] = [
    [[VIE_INF; 5]; 5],
    // CG
    [
        [-80, -100, -110, -100, -80],
        [-140, -150, -150, -140, -150],
        [-80, -100, -110, -100, -80],
        [-150, -230, -150, -240, -150],
        [-100, -100, -140, -100, -210],
    ],
    // GC
    [
        [-50, -110, -70, -110, -50],
        [-110, -110, -150, -130, -150],
        [-50, -110, -70, -110, -50],
        [-150, -250, -150, -220, -150],
        [-100, -110, -100, -110, -160],
    ],
    // GU
    [
        [20, 20, -20, -10, -20],
        [20, 20, -50, -30, -50],
        [-10, -10, -20, -10, -20],
        [-50, -100, -50, -110, -50],
        [-10, -10, -30, -10, -100],
    ],
    // UG
    [
        [0, -20, -10, -20, 0],
        [-30, -50, -30, -60, -30],
        [0, -20, -10, -20, 0],
        [-30, -90, -30, -110, -30],
        [-10, -20, -10, -20, -90],
    ],
    // AU
    [
        [-10, -10, -20, -10, -20],
        [-30, -30, -50, -30, -50],
        [-10, -10, -20, -10, -20],
        [-50, -120, -50, -110, -50],
        [-10, -10, -30, -10, -120],
    ],
    // UA
    [
        [0, -20, -10, -20, 0],
        [-30, -50, -30, -50, -30],
        [0, -20, -10, -20, 0],
        [-30, -150, -30, -150, -30],
        [-10, -20, -10, -20, -90],
    ],
    // NN
    [
        [20, 20, -10, -10, 0],
        [20, 20, -30, -30, -30],
        [0, -10, -10, -10, 0],
        [-30, -90, -30, -110, -30],
        [-10, -10, -10, -10, -90],
    ],
];

pub const MISMATCH_M37: [[[i32; 5]; 5]; NBPAIRS + 1] = [
    [[VIE_INF; 5]; 5],
    // CG
    [
        [-50, -110, -50, -140, -70],
        [-110, -110, -110, -160, -110],
        [-70, -150, -70, -150, -100],
        [-110, -130, -110, -140, -110],
        [-50, -150, -50, -150, -70],
    ],
    // GC
    [
        [-80, -140, -80, -140, -100],
        [-100, -150, -100, -140, -100],
        [-110, -150, -110, -150, -140],
        [-100, -140, -100, -160, -100],
        [-80, -150, -80, -150, -120],
    ],
    // GU
    [
        [-50, -80, -50, -50, -50],
        [-50, -100, -70, -50, -70],
        [-60, -80, -60, -80, -60],
        [-70, -110, -70, -80, -70],
        [-50, -80, -50, -80, -50],
    ],
    // UG
    [
        [-30, -30, -60, -60, -60],
        [-30, -30, -60, -60, -60],
        [-70, -100, -70, -100, -80],
        [-60, -80, -60, -80, -60],
        [-60, -100, -70, -100, -60],
    ],
    // AU
    [
        [-50, -80, -50, -80, -50],
        [-70, -100, -70, -110, -70],
        [-60, -80, -60, -80, -60],
        [-70, -110, -70, -120, -70],
        [-50, -80, -50, -80, -50],
    ],
    // UA
    [
        [-60, -80, -60, -80, -60],
        [-60, -80, -60, -80, -60],
        [-70, -100, -70, -100, -80],
        [-60, -80, -60, -80, -60],
        [-70, -100, -70, -100, -80],
    ],
    // NN
    [
        [-30, -30, -50, -50, -50],
        [-30, -30, -60, -50, -60],
        [-60, -80, -60, -80, -60],
        [-60, -80, -60, -80, -60],
        [-50, -80, -50, -80, -50],
    ],
];

pub const MISMATCH_EXT37: [[[i32; 5]; 5]; NBPAIRS + 1] = [
    [[VIE_INF; 5]; 5],
    // CG
    [
        [-50, -110, -50, -140, -70],
        [-110, -110, -110, -160, -110],
        [-70, -150, -70, -150, -100],
        [-110, -130, -110, -140, -110],
        [-50, -150, -50, -150, -70],
    ],
    // GC
    [
        [-80, -140, -80, -140, -100],
        [-100, -150, -100, -140, -100],
        [-110, -150, -110, -150, -140],
        [-100, -140, -100, -160, -100],
        [-80, -150, -80, -150, -120],
    ],
    // GU
    [
        [-50, -80, -50, -50, -50],
        [-50, -100, -70, -50, -70],
        [-60, -80, -60, -80, -60],
        [-70, -110, -70, -80, -70],
        [-50, -80, -50, -80, -50],
    ],
    // UG
    [
        [-30, -30, -60, -60, -60],
        [-30, -30, -60, -60, -60],
        [-70, -100, -70, -100, -80],
        [-60, -80, -60, -80, -60],
        [-60, -100, -70, -100, -60],
    ],
    // AU
    [
        [-50, -80, -50, -80, -50],
        [-70, -100, -70, -110, -70],
        [-60, -80, -60, -80, -60],
        [-70, -110, -70, -120, -70],
        [-50, -80, -50, -80, -50],
    ],
    // UA
    [
        [-60, -80, -60, -80, -60],
        [-60, -80, -60, -80, -60],
        [-70, -100, -70, -100, -80],
        [-60, -80, -60, -80, -60],
        [-70, -100, -70, -100, -80],
    ],
    // NN
    [
        [-30, -30, -50, -50, -50],
        [-30, -30, -60, -50, -60],
        [-60, -80, -60, -80, -60],
        [-60, -80, -60, -80, -60],
        [-50, -80, -50, -80, -50],
    ],
];

// Dangle energies
pub const DANGLE5_37: [[i32; 5]; NBPAIRS + 1] = [
    [VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF],
    [-10, -50, -30, -20, -10], // CG
    [0, -20, -30, 0, 0],       // GC
    [-20, -30, -30, -40, -20], // GU
    [-10, -30, -10, -20, -20], // UG
    [-20, -30, -30, -40, -20], // AU
    [-10, -30, -10, -20, -20], // UA
    [0, -20, -10, 0, 0],       // NN
];

pub const DANGLE3_37: [[i32; 5]; NBPAIRS + 1] = [
    [VIE_INF, VIE_INF, VIE_INF, VIE_INF, VIE_INF],
    [-40, -110, -40, -130, -60],  // CG
    [-80, -170, -80, -170, -120], // GC
    [-10, -70, -10, -70, -10],    // GU
    [-50, -80, -50, -80, -60],    // UG
    [-10, -70, -10, -70, -10],    // AU
    [-50, -80, -50, -80, -60],    // UA
    [-10, -70, -10, -70, -10],    // NN
];
